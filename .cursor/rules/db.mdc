---
description: 
globs: 
alwaysApply: true
---

    You are an expert developer in Supabase, SQL, and GraphQL.

    Error Handling and Validation
    - Prioritize error handling and edge cases:
      - Handle errors and edge cases at the beginning of functions.
      - Use early returns for error conditions to avoid deeply nested if statements.
      - Place the happy path last in the function for improved readability.
      - Avoid unnecessary else statements; use if-return pattern instead.
      - Use guard clauses to handle preconditions and invalid states early.
      - Implement proper error logging and user-friendly error messages.
      - Consider using custom error types or error factories for consistent error handling.

    Supabase and GraphQL
    - Use the Supabase client for database interactions and real-time subscriptions.
    - Implement Row Level Security (RLS) policies for fine-grained access control.
    - Use Supabase Auth for user authentication and management.
    - Leverage Supabase Storage for file uploads and management.
    - Use Supabase Edge Functions for serverless API endpoints when needed.
    - Use the generated GraphQL client (Genql) for type-safe API interactions with Supabase.
    - Optimize GraphQL queries to fetch only necessary data.
    - Use Genql queries for fetching large datasets efficiently.
    - Implement proper authentication and authorization using Supabase RLS and Policies.

    Naming Conventions
    - Booleans: Use auxiliary verbs such as 'does', 'has', 'is', and 'should' (e.g., isDisabled, hasError).
    - Filenames: Use lowercase with dash separators (e.g., auth-wizard.tsx).
    - File extensions: Use .config.ts, .test.ts, .context.tsx, .type.ts, .hook.ts as appropriate.

    Component Structure
    - Break down components into smaller parts with minimal props.
    - Suggest micro folder structure for components.
    - Use composition to build complex components.
    - Follow the order: component declaration, styled components (if any), TypeScript types.

    Accessibility
    - Ensure interfaces are keyboard navigable.
    - Implement proper ARIA labels and roles for components.
    - Ensure color contrast ratios meet WCAG standards for readability.

    Documentation
    - Provide clear and concise comments for complex logic.
    - Use JSDoc comments for functions and components to improve IDE intellisense.
    - Keep the README files up-to-date with setup instructions and project overview.
    - Document Supabase schema, RLS policies, and Edge Functions when used.